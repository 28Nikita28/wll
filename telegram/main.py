from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hcode, hbold
from dotenv import load_dotenv
import asyncio
import logging
import os
import aiohttp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TG_TOKEN")
if not TOKEN:
    logger.critical("‚ùå TG_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    exit(1)

BACKEND_URL = os.getenv("BACKEND_URL", "https://hdghs.onrender.com/chat/telegram")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

class UserState(StatesGroup):
    selected_model = State()

MODELS = {
    "gpt-4.1-mini": "üöÄ gpt-4.1-mini",
    "gpt-4o-mini": "üöÄ gpt-4o-mini",
    "deepseek": "üß† DeepSeek 0324",
    "deepseek-r1": "üöÄ DeepSeek R1",
    "deepseek-v3": "üíé DeepSeek v3",
    "gemini": "üîÆ Gemini Pro",
    "gemma": "üíé Gemma 27B",
    "qwen": "üé≤ Qwen 32B",
    "qwen 2.5": "üé≤ Qwen 2.5",
    "llama-4-maverick": "ü¶ô Llama Maverick",
    "llama-4-scout": "ü¶ô Llama Scout",
    "deepseek-r1-free": "üöÄ DeepSeek R1 Free"
}

async def generate(prompt: str, url: str, model: str) -> str:
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                url,
                json={"userInput": prompt, "model": model},
                timeout=30
            ) as resp:
                if resp.status != 200:
                    raise Exception(f"–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                data = await resp.json()
                return data.get("content", "")
        except Exception as e:
            print(f"[generate error] {e}")
            return ""

def get_model_keyboard(selected: str = None) -> types.InlineKeyboardMarkup:
    buttons = []

    for key, name in MODELS.items():
        status_icon = "üü¢" if key == selected else "‚ö™"
        buttons.append([
            types.InlineKeyboardButton(
                text=f"{status_icon} {name}",
                callback_data=f"model_{key}"
            )
        ])

    buttons.append([
        types.InlineKeyboardButton(
            text="üß© –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å",
            callback_data="open_model_menu"
        ),
        types.InlineKeyboardButton(
            text="üåç Web App",
            web_app=types.WebAppInfo(url="https://w5model.netlify.app/")
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_reply_keyboard() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üß© –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–ò..."
    )

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_data({"selected_model": "gpt-4o-mini"})
    await message.answer(
        f"{hbold('ü§ñ AI Assistant Bot')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: üöÄ deepseek-r1-free",
        reply_markup=get_reply_keyboard()  
    )

@dp.callback_query(lambda c: c.data == "open_model_menu")
async def open_model_menu(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    selected = user_data.get("selected_model", "gpt-4o-mini")

    await callback.message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:",
        reply_markup=get_model_keyboard(selected)
    )
    await callback.answer()

@dp.message(Command("model"))
async def model_command(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        reply_markup=get_model_keyboard(user_data.get("selected_model"))
    )

@dp.callback_query(lambda c: c.data.startswith("model_"))
async def model_selected(callback: types.CallbackQuery, state: FSMContext):
    model_key = callback.data.split("_")[1]
    if model_key not in MODELS:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        return
    await state.update_data(selected_model=model_key)
    await callback.message.edit_reply_markup(reply_markup=get_model_keyboard(model_key))
    await callback.answer(f"‚úÖ {MODELS[model_key]} –≤—ã–±—Ä–∞–Ω–∞")

@dp.message()
async def handle_message(message: types.Message, state: FSMContext):
    if message.text == "üß© –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å":
        user_data = await state.get_data()
        selected = user_data.get("selected_model", "gpt-4o-mini")
        await message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=get_model_keyboard(selected))
        return

    user_data = await state.get_data()
    model = user_data.get("selected_model", "gpt-4o-mini")

    await message.bot.send_chat_action(message.chat.id, "typing")
    processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

    try:
        response = await generate(message.text, BACKEND_URL, model)
        await processing_msg.delete()

        if not response:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")

        formatted = response.replace("```", "'''")
        text = f"{hbold(MODELS[model])} –æ—Ç–≤–µ—Ç–∏–ª:\n{hcode(formatted)}"

        await message.answer(text, reply_markup=get_model_keyboard(model))

    except asyncio.TimeoutError:
        await message.answer("‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)[:200]}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
